{"amount_correct": 10, "percentage_score": 59, "report_time": "2024-11-08 15:29:38", "checks": [{"description": "Ensure that the README.md file exists inside of the root of the GitHub repository", "check": "ConfirmFileExists", "status": true, "path": "../README.md"}, {"description": "Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md", "check": "MatchFileFragment", "options": {"fragment": "Add Your Name Here", "count": 0, "exact": true}, "status": true, "path": "../README.md"}, {"description": "Retype the every word in the Honor Code pledge in README.md", "check": "MatchFileFragment", "options": {"fragment": "I adhered to the Allegheny College Honor Code while completing this examination.", "count": 3, "exact": true}, "status": true, "path": "../README.md"}, {"description": "Indicate that you have completed all of the tasks in the README.md", "check": "MatchFileFragment", "options": {"fragment": "- [X]", "count": 10, "exact": true}, "status": false, "path": "../README.md", "diagnostic": "Found 0 fragment(s) in the README.md or the output while expecting exactly 10"}, {"description": "Ensure that question_one.py file exists in the questions/ directory", "check": "ConfirmFileExists", "status": true, "path": "questions/question_one.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": true, "path": "questions/question_one.py"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 4, "exact": true}, "status": true, "path": "questions/question_one.py"}, {"description": "Ensure that test_question_one.py file exists in the tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "tests/test_question_one.py"}, {"description": "Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code", "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_a\"", "objectives": {"LO1": {"degree": [{"CS": "I", "rationale": "Manipulate the matrix data structure"}]}, "LO5": {"degree": [{"CS": "D", "rationale": "Search a matrix and compute summary values based on matrix"}]}}, "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 F                                                                                                                    \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_minimum_value - AssertionError: Minimum positive value in matrix        \u2502\n     \u2502 assert (1 == 9)                                                                                                      \u2502\n     \u2502 1 failed, 2 deselected in 0.01s                                                                                      \u2502\n     \u2502 Details: 1 failed, 1 total, 3 collected, 2 deselected                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                      \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_minimum_value                          \u2502\n     \u2502   Path: <...>/executable-examination-example-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 19                                                                    \u2502\n     \u2502   Message: AssertionError: Minimum positive value in matrix                          \u2502\n     \u2502 assert (1 == 9)                                                                      \u2502\n     \u2502                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                   \u2502\n     \u2502 # File: tests/test_question_one.py Line: 13                       \u2502\n     \u2502 @pytest.mark.question_one_part_a                                  \u2502\n     \u2502 def test_find_minimum_value():                                    \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                   \u2502\n     \u2502     # check 1: Matrix with positive values                        \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                    \u2502\n     \u2502     minimum_positive = find_minimum_value(matrix)                 \u2502\n     \u2502     assert (                                                      \u2502\n     \u2502         1 == minimum_positive and minimum_positive is not None    \u2502\n     \u2502     ), \"Minimum positive value in matrix\"                         \u2502\n     \u2502     # check 2: Matrix with negative values                        \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                \u2502\n     \u2502     minimum_negative = find_minimum_value(matrix)                 \u2502\n     \u2502     assert (                                                      \u2502\n     \u2502         -4 == minimum_negative and minimum_negative is not None   \u2502\n     \u2502         # )                                                       \u2502\n     \u2502     ), \"Minimum negative value in matrix\"                         \u2502\n     \u2502     # check 3: Matrix with a single element                       \u2502\n     \u2502     matrix = [[10]]                                               \u2502\n     \u2502     minimum_single = find_minimum_value(matrix)                   \u2502\n     \u2502     assert (                                                      \u2502\n     \u2502         10 == minimum_single and minimum_single is not None       \u2502\n     \u2502     ), \"Minimum value in single matrix\"                           \u2502\n     \u2502     # check 4: Empty matrix                                       \u2502\n     \u2502     matrix = []                                                   \u2502\n     \u2502     minimum_empty = find_minimum_value(matrix)                    \u2502\n     \u2502     assert minimum_empty is None, \"Minimum value in empty matrix\" \u2502\n     \u2502                                                                   \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code", "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_b\"", "objectives": {"LO1": {"degree": [{"CS": "I", "rationale": "Manipulate the matrix data structure"}]}, "LO5": {"degree": [{"CS": "D", "rationale": "Search a matrix and compute summary values based on matrix"}]}}, "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 F                                                                                                                    \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_maximum_value - AssertionError: Maximum positive value in matrix        \u2502\n     \u2502 assert 9 == 1                                                                                                        \u2502\n     \u2502 1 failed, 2 deselected in 0.01s                                                                                      \u2502\n     \u2502 Details: 1 failed, 1 total, 3 collected, 2 deselected                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                      \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_maximum_value                          \u2502\n     \u2502   Path: <...>/executable-examination-example-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 47                                                                    \u2502\n     \u2502   Message: AssertionError: Maximum positive value in matrix                          \u2502\n     \u2502 assert 9 == 1                                                                        \u2502\n     \u2502                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                      \u2502\n     \u2502 # File: tests/test_question_one.py Line: 41                          \u2502\n     \u2502 @pytest.mark.question_one_part_b                                     \u2502\n     \u2502 def test_find_maximum_value():                                       \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                      \u2502\n     \u2502     # check 1: Matrix with positive values                           \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                       \u2502\n     \u2502     maximum_positive = find_maximum_value(matrix)                    \u2502\n     \u2502     assert 9 == maximum_positive, \"Maximum positive value in matrix\" \u2502\n     \u2502     # check 2: Matrix with negative values                           \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                   \u2502\n     \u2502     maximum_negative = find_maximum_value(matrix)                    \u2502\n     \u2502     assert 7 == maximum_negative, \"Maximum negative value in matrix\" \u2502\n     \u2502     # check 3: Matrix with a single element                          \u2502\n     \u2502     matrix = [[10]]                                                  \u2502\n     \u2502     maximum_single = find_maximum_value(matrix)                      \u2502\n     \u2502     assert 10 == maximum_single, \"Maximum value in single matrix\"    \u2502\n     \u2502     # check 4: Empty matrix                                          \u2502\n     \u2502     matrix = []                                                      \u2502\n     \u2502     maximum_empty = find_maximum_value(matrix)                       \u2502\n     \u2502     assert maximum_empty is None, \"Maximum value in empty matrix\"    \u2502\n     \u2502                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code", "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_c\"", "objectives": {"LO1": {"degree": [{"CS": "I", "rationale": "Manipulate the matrix data structure"}]}, "LO5": {"degree": [{"CS": "D", "rationale": "Search a matrix and compute summary values based on matrix"}]}}, "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 F                                                                                                                    \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_average_value - AssertionError: Average value in matrix with positive   \u2502\n     \u2502 numbers                                                                                                              \u2502\n     \u2502 assert 5.0 == 2.0                                                                                                    \u2502\n     \u2502 1 failed, 2 deselected in 0.01s                                                                                      \u2502\n     \u2502 Details: 1 failed, 1 total, 3 collected, 2 deselected                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                      \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_average_value                          \u2502\n     \u2502   Path: <...>/executable-examination-example-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 68                                                                    \u2502\n     \u2502   Message: AssertionError: Average value in matrix with positive numbers             \u2502\n     \u2502 assert 5.0 == 2.0                                                                    \u2502\n     \u2502                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                     \u2502\n     \u2502 # File: tests/test_question_one.py Line: 62                                         \u2502\n     \u2502 @pytest.mark.question_one_part_c                                                    \u2502\n     \u2502 def test_find_average_value():                                                      \u2502\n     \u2502     \"\"\"Confirm correctness of a question part.\"\"\"                                   \u2502\n     \u2502     # check 1: Matrix with positive values                                          \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                      \u2502\n     \u2502     average_positive = find_average_value(matrix)                                   \u2502\n     \u2502     assert 5.0 == average_positive, \"Average value in matrix with positive numbers\" \u2502\n     \u2502     # check 2: Matrix with negative values                                          \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                                  \u2502\n     \u2502     average_negative = find_average_value(matrix)                                   \u2502\n     \u2502     assert 1.0 == average_negative, \"Average value in matrix with negative numbers\" \u2502\n     \u2502     # check 3: Matrix with a single element                                         \u2502\n     \u2502     matrix = [[10]]                                                                 \u2502\n     \u2502     average_single = find_average_value(matrix)                                     \u2502\n     \u2502     assert 10.0 == average_single, \"Average value in single element matrix\"         \u2502\n     \u2502     # check 4: Empty matrix                                                         \u2502\n     \u2502     matrix = []                                                                     \u2502\n     \u2502     average_empty = find_average_value(matrix)                                      \u2502\n     \u2502     assert average_empty is None, \"Average value in empty matrix\"                   \u2502\n     \u2502                                                                                     \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Ensure that Question 1 follows industry-standard rules using the command 'ruff check'", "command": "poetry run ruff check questions/question_one.py", "status": false, "diagnostic": "questions/question_one.py:8:1: I001 [*] Import block is un-sorted or un-formatted\n        |\n      6 |   # to the industry best practices for Python source code.\n      7 |   \n      8 | / from typing import Union\n      9 | | from typing import List\n     10 | | \n     11 | | # Introduction: Read This First! {{{\n        | |_^ I001\n     12 |   \n     13 |   # Keep in mind these considerations as you implement the required functions:\n        |\n        = help: Organize imports\n     \n     Found 1 error.\n     [*] 1 fixable with the `--fix` option."}, {"description": "Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'", "command": "poetry run ruff format questions/question_one.py --check", "status": false, "diagnostic": "Would reformat: questions/question_one.py\n     1 file would be reformatted"}, {"description": "Ensure that Question 1 has correct type annotations using the command 'mypy'", "command": "poetry run mypy questions/question_one.py", "status": true}, {"description": "Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'", "check": "MatchCommandFragment", "options": {"command": "poetry run symbex -s --fully-typed -f questions/question_one.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 1 has correct number of documented functions using the command 'symbex'", "check": "MatchCommandFragment", "options": {"command": "poetry run symbex -s --documented -f questions/question_one.py --count", "fragment": 3, "count": 1, "exact": true}, "status": true}, {"description": "Ensure that Question 1 has no undocumented functions using the command 'symbex'", "check": "MatchCommandFragment", "options": {"command": "poetry run symbex -s --undocumented -f questions/question_one.py --count", "fragment": 0, "count": 1, "exact": true}, "status": true}]}